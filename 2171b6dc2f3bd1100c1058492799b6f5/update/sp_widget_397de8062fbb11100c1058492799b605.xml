<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function loginCtrl($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {

	var c = this;
	c.remember_me = c.data.forgetMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	c.masked = true;
	if (!c.data.is_logged_in && c.data.multisso_enabled && c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
		});
	} else if (!c.data.is_logged_in && c.data.certAuthRedirect && c.data.cert_based_auth && c.data.certHeader == "true") {
        login(null, null, true);
    }
    
    c.login = function(username, password, isCertLogin) {
        login(username, password, isCertLogin);
    };
	
	function login(username, password, isCertLogin) {
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'is_direct_redirect': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url(),
				'mfa_redirect_url': isLoginPage ? null : c.data.pageURI,
				'cert_login' : !!isCertLogin
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				if (c.data.multiFactorAuthEnabled) {
					c.server.get({
						action: "multi_factor_auth_setup",
						directTo: response.data.redirect_url
					}).then(handleLoginSuccess.bind(response));
				} else {
					handleLoginSuccess.call(response);
				}
			} else if (response.data.status == 'mfa_code_required') {
					$window.location = '/validate_multifactor_auth_code.do';
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};

	c.externalLogin = function() {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

			glideUserSession.getSsoRedirectUrlForUsername(c.username)
				.then(function(url) {
					$window.location = url;
				}, function(err) {
					spUtil.addErrorMessage($scope.data.errorMsg2);
				});
		});
	}

	function handleLoginSuccess() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length > 0)
			$window.location.reload();
	}

	c.setExternalLogin = function(newVal) {
		c.externalLoginMode = newVal;
		if(!newVal)
			c.masked = true;
	}
	
	c.renderMaskIcon = function() {
		var passwordEle = document.getElementById("password");
		var maskEle = document.getElementById("mask_icon");
		var btnDescription = document.getElementById("btnDescription");
		var element = document.getElementsByClassName("mask_btn")[0];
		var isPasswordType = passwordEle.type === 'password';
		maskEle.classList.toggle('slashed', isPasswordType);
		maskEle.setAttribute("data-original-title", (isPasswordType)? 'Hide password' : 'Show password');
		element.setAttribute("aria-label", (isPasswordType) ? 'Hide password' : 'Show password');
		passwordEle.type  = (isPasswordType) ? 'text' : 'password';
		btnDescription.textContent = (isPasswordType)? 'Password shown' : 'Password hidden';		
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.login-modal{&#13;
	margin: 0;&#13;
	padding: 0;&#13;
	display: flex;&#13;
	justify-content: center;&#13;
	align-items: center;&#13;
	min-height: 100vh;&#13;
	font-family: 'DM Sans', sans-serif;&#13;
}&#13;
.main{&#13;
	width: 350px;&#13;
	height: 500px;&#13;
	background: red;&#13;
	overflow: hidden;&#13;
  	background: linear-gradient(to bottom, #000, #202126, #363740);&#13;
	border-radius: 10px;&#13;
	box-shadow: 5px 20px 50px #000;&#13;
}&#13;
#chk{&#13;
	display: none;&#13;
}&#13;
.login{&#13;
	position: relative;&#13;
	width:100%;&#13;
	height: 100%;&#13;
}&#13;
label{&#13;
	color: #fff;&#13;
	font-size: 2.3em;&#13;
	justify-content: center;&#13;
	display: flex;&#13;
	margin: 60px;&#13;
	font-weight: bold;&#13;
	cursor: pointer;&#13;
	transition: .5s ease-in-out;&#13;
}&#13;
input{&#13;
	width: 60%;&#13;
	height: 20px;&#13;
	background: #e0dede;&#13;
	justify-content: center;&#13;
	display: flex;&#13;
	margin: 20px auto;&#13;
	padding: 10px;&#13;
	border: none;&#13;
	outline: none;&#13;
	border-radius: 5px;&#13;
}&#13;
button{&#13;
	width: 60%;&#13;
	height: 40px;&#13;
	margin: 10px auto;&#13;
	justify-content: center;&#13;
	display: block;&#13;
	color: #fff;&#13;
	background: #363740;&#13;
	font-size: 1em;&#13;
	font-weight: bold;&#13;
	margin-top: 20px;&#13;
	outline: none;&#13;
	border: none;&#13;
	border-radius: 5px;&#13;
	transition: .2s ease-in;&#13;
	cursor: pointer;&#13;
}&#13;
button:hover{&#13;
	background: #666879;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>hrs_login</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>HRS Login</name>
        <option_schema/>
        <public>true</public>
        <roles>x_881199_hotel_res.users</roles>
        <script><![CDATA[(function() {
    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input && input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input && input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") && gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord && (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
    
    //get the certificate header
    if (data.cert_based_auth) {
	var request = GlideTransaction.get().getRequest();
	var certHeader = request.getHeader("X-Client-Cert");
	if (!certHeader) {
		data.certHeader = "false";
            gs.log("Failed to register PIV/CAC certificate to the user account.");
        } else
		data.certHeader = "true";    
    }

    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive && gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length > 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.forgetMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso && GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
    data.certAuthRedirect = gs.getProperty('glide.authenticate.cert.redirect.enable', 'false') == 'true';
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-17 10:16:10</sys_created_on>
        <sys_id>397de8062fbb11100c1058492799b605</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>HRS Login</sys_name>
        <sys_package display_value="Hotel Reservation System" source="x_881199_hotel_res">2171b6dc2f3bd1100c1058492799b6f5</sys_package>
        <sys_policy/>
        <sys_scope display_value="Hotel Reservation System">2171b6dc2f3bd1100c1058492799b6f5</sys_scope>
        <sys_update_name>sp_widget_397de8062fbb11100c1058492799b605</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-12-20 15:34:21</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.is_logged_in" class="login-modal" ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')">
	<div class="main" >  	
		<input type="checkbox" id="chk" aria-hidden="true">
			<div class="login">
				<form ng-if="!c.externalLoginMode" ng-submit="c.login(c.username, c.password)" method="post">
					<label for="chk" aria-hidden="true">Login</label>
					<input placeholder="Username" id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" type="text" autofocus="true" ng-model="c.username">
					<input placeholder="Password" id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" type="password" ng-model="c.password">
					<button name="login" type="submit">Login</button>
				</form>
			</div>
	</div>
</div>]]></template>
    </sp_widget>
</record_update>
